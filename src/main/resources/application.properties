spring.application.name=auth-service


spring.datasource.url=${DATABASE_URL}
spring.datasource.username=${DATABASE_USERNAME}
spring.datasource.password=${DATABASE_PASSWORD}

server.port=3002

spring.datasource.driver-class-name=org.postgresql.Driver

spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

spring.jpa.hibernate.ddl-auto=update


logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.web=DEBUG


#  ============================
# Email SMTP Configuration
# ============================
#
# NOTE for future developers:
# ----------------------------------------
# To switch from the current personal email (e.g., Gmail) to a community or production mail service,
# update the following properties accordingly:
#
# 1. spring.mail.host      -> Change to the new SMTP server host (e.g., smtp.sendgrid.net)
# 2. spring.mail.port      -> Update port if needed (commonly 587 for TLS or 465 for SSL)
# 3. spring.mail.username  -> Use the new SMTP username or API key as provided by your mail service
# 4. spring.mail.password  -> Use the new SMTP password or API key (never commit secrets to version control)
# 5. spring.mail.properties.mail.smtp.* -> Adjust any additional SMTP properties per your mail providerâ€™s requirements
# 6. From address in emails -> Update to use a domain-verified sender email (e.g., noreply@yourdomain.com)
#
# For Gmail, make sure to use an App Password with 2FA enabled.
# For production, consider environment variables or secret management tools for credentials.
#
# Remember to test sending emails after any change.
#
# ============================
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=${EMAIL_USERNAME}
spring.mail.password=${EMAIL_PASSWORD}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true
spring.mail.properties.mail.smtp.ssl.trust=smtp.gmail.com
spring.mail.properties.mail.smtp.connectiontimeout=5000
spring.mail.properties.mail.smtp.timeout=5000
spring.mail.properties.mail.smtp.writetimeout=5000
spring.mail.default-encoding=UTF-8

# ============================
# Google OAuth2 Configuration
# ============================

spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.scope=openid,profile,email
spring.security.oauth2.client.registration.google.redirect-uri={baseUrl}/api/auth/oauth2/callback/{registrationId}

spring.security.oauth2.client.registration.google.client-name=Google

spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/v2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo
spring.security.oauth2.client.provider.google.user-name-attribute=sub